Exposure Time Calculator for the Giant Magellan Telescope (GMT-ETC)
Design Document

Affonso Gino Amendola Neto (IAG-USP)

affonso.gino.neto@usp.br
https://github.com/affonsoamendola/gmt-etc

Distributed under GPLv3 License, check the LICENSE file for more info.
----------------------------------------

GMT-ETC is supposed to receive parameters regarding 3 different aspects of an observation, and return a 4th one derived from the 3 aspects that were "locked down", those aspects are:

*Object Flux (Units are irrelevant, internally the software will use photon counts as flux, as long as the software knows what is the unit you are supplying, and the software knows how to convert from those units to photon counts, it should be okay.)

*Observation Conditions (Multiple variables go into this aspect and some are only variable as an experiment, from the atmospheric conditions to the optical design of the telescope itself, and as such not locking this down would be problematic, it should be possible to derive desired values for one or two of these variables while the other 3 aspects are locked down)
---Airmass
---Moon Brightness
---Optical Efficiency
---CCD related noise

*Exposure Time (in seconds, Most likely this will be the aspect/variable that won't be locked down, since this is the most easily alterable variable while observing an object, you can't really do anything about the atmosphere or the brightness of the moon and you need a desirable value of SNR to be able to do science, this is really the only variable an observer can do anything about, so far at least.)

*Signal to Noise Ratio (This is most likely going to be an *desired* value of SNR if supplied, so that you can obtain an exposure time that will supply said value of SNR, or the flux of the dimmest star that can be observed with Xsecs exposure time but still having an SNR of Y)

----------------------------------------

The software is supposed to be modular, simulating the effects of each of the individual parts that form the telescope on the variables, the idea is to make it so modular that you can experiment with the optical design, or even simulate other telescopes (maybe in the future, make a completely generic ETC)

Implementing this modularity should make use of the Object Oriented Nature of python, defining each optical element as generically as possible, making use of polymorphism where applicable.

The optical magic that happens in a telescope usually follows the following order:

The light enters the telescope, bounces on the main mirror, hits a secondary mirror, enters the instrument (or bounces around some other mirrors or light conduits like glass fibre), the instrument does what it needs to do with the light, and finally hits some kind of detector.

We can make some assumptions that will make simulating the behaviour of the light easier, we can safely assume that the image won't be significally deformed before the instrument does what it needs, so the mirrors only will only cause loss of light due to the non-100% reflectivity.

Keeping in mind that not every photon that enters the telescope hits the main mirror, since there might be a secondary in the way, however, since each mirror has an Efficiency value relating to the non-100% reflectivity, you could just subtract that "Secondary is in the way effect" to the efficiency value of the primary mirror. Both are just photons that never made it to the secondary.

-------------------------------------------------------------------------

